// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef XBBJ_U96_CNVW2A2_H
#define XBBJ_U96_CNVW2A2_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xbbj_u96_cnvw2a2_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Control_BaseAddress;
} XBbj_u96_cnvw2a2_Config;
#endif

typedef struct {
    u32 Control_BaseAddress;
    u32 IsReady;
} XBbj_u96_cnvw2a2;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XBbj_u96_cnvw2a2_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XBbj_u96_cnvw2a2_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XBbj_u96_cnvw2a2_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XBbj_u96_cnvw2a2_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XBbj_u96_cnvw2a2_Initialize(XBbj_u96_cnvw2a2 *InstancePtr, u16 DeviceId);
XBbj_u96_cnvw2a2_Config* XBbj_u96_cnvw2a2_LookupConfig(u16 DeviceId);
int XBbj_u96_cnvw2a2_CfgInitialize(XBbj_u96_cnvw2a2 *InstancePtr, XBbj_u96_cnvw2a2_Config *ConfigPtr);
#else
int XBbj_u96_cnvw2a2_Initialize(XBbj_u96_cnvw2a2 *InstancePtr, const char* InstanceName);
int XBbj_u96_cnvw2a2_Release(XBbj_u96_cnvw2a2 *InstancePtr);
#endif

void XBbj_u96_cnvw2a2_Start(XBbj_u96_cnvw2a2 *InstancePtr);
u32 XBbj_u96_cnvw2a2_IsDone(XBbj_u96_cnvw2a2 *InstancePtr);
u32 XBbj_u96_cnvw2a2_IsIdle(XBbj_u96_cnvw2a2 *InstancePtr);
u32 XBbj_u96_cnvw2a2_IsReady(XBbj_u96_cnvw2a2 *InstancePtr);
void XBbj_u96_cnvw2a2_EnableAutoRestart(XBbj_u96_cnvw2a2 *InstancePtr);
void XBbj_u96_cnvw2a2_DisableAutoRestart(XBbj_u96_cnvw2a2 *InstancePtr);

void XBbj_u96_cnvw2a2_Set_in_V(XBbj_u96_cnvw2a2 *InstancePtr, u64 Data);
u64 XBbj_u96_cnvw2a2_Get_in_V(XBbj_u96_cnvw2a2 *InstancePtr);
void XBbj_u96_cnvw2a2_Set_out_V(XBbj_u96_cnvw2a2 *InstancePtr, u64 Data);
u64 XBbj_u96_cnvw2a2_Get_out_V(XBbj_u96_cnvw2a2 *InstancePtr);
void XBbj_u96_cnvw2a2_Set_doInit(XBbj_u96_cnvw2a2 *InstancePtr, u32 Data);
u32 XBbj_u96_cnvw2a2_Get_doInit(XBbj_u96_cnvw2a2 *InstancePtr);
void XBbj_u96_cnvw2a2_Set_targetLayer(XBbj_u96_cnvw2a2 *InstancePtr, u32 Data);
u32 XBbj_u96_cnvw2a2_Get_targetLayer(XBbj_u96_cnvw2a2 *InstancePtr);
void XBbj_u96_cnvw2a2_Set_targetMem(XBbj_u96_cnvw2a2 *InstancePtr, u32 Data);
u32 XBbj_u96_cnvw2a2_Get_targetMem(XBbj_u96_cnvw2a2 *InstancePtr);
void XBbj_u96_cnvw2a2_Set_targetInd(XBbj_u96_cnvw2a2 *InstancePtr, u32 Data);
u32 XBbj_u96_cnvw2a2_Get_targetInd(XBbj_u96_cnvw2a2 *InstancePtr);
void XBbj_u96_cnvw2a2_Set_targetThresh(XBbj_u96_cnvw2a2 *InstancePtr, u32 Data);
u32 XBbj_u96_cnvw2a2_Get_targetThresh(XBbj_u96_cnvw2a2 *InstancePtr);
void XBbj_u96_cnvw2a2_Set_val_V(XBbj_u96_cnvw2a2 *InstancePtr, u64 Data);
u64 XBbj_u96_cnvw2a2_Get_val_V(XBbj_u96_cnvw2a2 *InstancePtr);
void XBbj_u96_cnvw2a2_Set_numReps(XBbj_u96_cnvw2a2 *InstancePtr, u32 Data);
u32 XBbj_u96_cnvw2a2_Get_numReps(XBbj_u96_cnvw2a2 *InstancePtr);

void XBbj_u96_cnvw2a2_InterruptGlobalEnable(XBbj_u96_cnvw2a2 *InstancePtr);
void XBbj_u96_cnvw2a2_InterruptGlobalDisable(XBbj_u96_cnvw2a2 *InstancePtr);
void XBbj_u96_cnvw2a2_InterruptEnable(XBbj_u96_cnvw2a2 *InstancePtr, u32 Mask);
void XBbj_u96_cnvw2a2_InterruptDisable(XBbj_u96_cnvw2a2 *InstancePtr, u32 Mask);
void XBbj_u96_cnvw2a2_InterruptClear(XBbj_u96_cnvw2a2 *InstancePtr, u32 Mask);
u32 XBbj_u96_cnvw2a2_InterruptGetEnabled(XBbj_u96_cnvw2a2 *InstancePtr);
u32 XBbj_u96_cnvw2a2_InterruptGetStatus(XBbj_u96_cnvw2a2 *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
